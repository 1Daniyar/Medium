package life;

import javax.swing.*;
import java.io.IOException;
import java.util.Random;
import java.util.Scanner;

public class GameOfLife extends JFrame {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int size = scanner.nextInt();

        Universe universe = new Universe(size);
        Generation generation = new Generation(universe);

        for(int i = 1; i < 10; i++){
            System.out.printf("Generation #%d", i);
            System.out.println();
            System.out.printf("Alive: %d", universe.alive());
            System.out.println();

            universe.print();

            generation.generate();
        }
    }
}

class Universe{
    private boolean[][] field;
    private final int size;

    public Universe(int size){
        this.size = size;
        field = new boolean[size][size];
        init();
    }

    private void init(){
        Random random = new Random();
        for(int i = 0; i < size; i++){
            for(int j = 0; j < size; j++){
                field[i][j] = random.nextBoolean();
            }
        }
    }

    public void setField(boolean[][] field){
        this.field = field;
    }

    public boolean[][] getField(){
        return field;
    }

    public int getSize(){
        return size;
    }

    public int alive(){
        int count = 0;

        for(int i = 0; i < size; i++){
            for(int j = 0; j < size; j++){
                if(field[i][j])
                    count++;
            }
        }

        return count;
    }

    public void print(){
        for(int i = 0; i < size; i++){
            for(int j = 0; j < size; j++){
                System.out.print(field[i][j] ? 'O' : ' ');
            }
            System.out.println();
        }
    }
}

class Generation{
    Universe universe;
    boolean[][] currentField;
    boolean[][] nextField;
    private int size;

    public Generation(Universe universe){
        this.universe = universe;
        size = universe.getSize();
    }

    void generate(){
        currentField = universe.getField();
        nextField = new boolean[size][size];

        for(int i = 0; i < size; i++){
            for(int j = 0; j < size; j++){
                if(currentField[i][j]){
                    if(countNeighbours(i, j) == 2 || countNeighbours(i, j) == 3){
                        nextField[i][j] = true;
                    }
                } else if (countNeighbours(i, j) == 3)
                    nextField[i][j] = true;
            }
        }

        universe.setField(nextField);
    }

    private int countNeighbours(int i, int j){
        int result = 0;
        if(currentField[i - 1 < 0 ? size - 1 : i - 1][j - 1 < 0 ? size - 1 : j - 1])
            result++;
        if(currentField[i - 1 < 0 ? size - 1 : i - 1][j])
            result++;
        if(currentField[i - 1 < 0 ? size - 1 : i - 1][j + 1 < size ? j + 1 : 0])
            result++;
        if(currentField[i][j - 1 < 0 ? size - 1 : j - 1])
            result++;
        if(currentField[i][j + 1 < size ? j + 1 : 0])
            result++;
        if(currentField[i + 1 < size ? i + 1 : 0][j - 1 < 0 ? size - 1 : j - 1])
            result++;
        if(currentField[i + 1 < size ? i + 1 : 0][j])
            result++;
        if(currentField[i + 1 < size ? i + 1 : 0][j + 1 < size ? j + 1 : 0])
            result++;

        return result;
    }
}
